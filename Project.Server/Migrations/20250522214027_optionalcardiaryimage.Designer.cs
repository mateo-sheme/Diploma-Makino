// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Server.Data;

#nullable disable

namespace Project.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250522214027_optionalcardiaryimage")]
    partial class optionalcardiaryimage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project.Server.Entities.Car_Image", b =>
                {
                    b.Property<int>("Image_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Image_ID"));

                    b.Property<int>("Car_ID")
                        .HasColumnType("int");

                    b.Property<string>("Content_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image_Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Is_Primary")
                        .HasColumnType("bit");

                    b.HasKey("Image_ID");

                    b.HasIndex("Car_ID");

                    b.ToTable("Car_Images");
                });

            modelBuilder.Entity("Project.Server.Entities.Cars_Sale", b =>
                {
                    b.Property<int>("Car_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Car_ID"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fuel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kilometers")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_ID")
                        .HasColumnType("int");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Car_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Cars_Sale");
                });

            modelBuilder.Entity("Project.Server.Entities.Diary_Car", b =>
                {
                    b.Property<int>("User_Car_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_Car_ID"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Car_Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Content_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Current_Kilometers")
                        .HasColumnType("int");

                    b.Property<string>("Fuel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inspection_Expiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Insurance_Expiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("License_Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname_Car")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_ID")
                        .HasColumnType("int");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_Car_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Diary_Car");
                });

            modelBuilder.Entity("Project.Server.Entities.Maintenance_Record", b =>
                {
                    b.Property<int>("Record_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Record_ID"));

                    b.Property<int>("Kilometers")
                        .HasColumnType("int");

                    b.Property<string>("Maintenance_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Next_Maintenance_Km")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Record_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("User_Car_ID")
                        .HasColumnType("int");

                    b.HasKey("Record_ID");

                    b.HasIndex("User_Car_ID");

                    b.ToTable("Maintenance_Record");
                });

            modelBuilder.Entity("Project.Server.Entities.User", b =>
                {
                    b.Property<int>("User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Project.Server.Entities.Car_Image", b =>
                {
                    b.HasOne("Project.Server.Entities.Cars_Sale", "Car")
                        .WithMany("Images")
                        .HasForeignKey("Car_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Project.Server.Entities.Cars_Sale", b =>
                {
                    b.HasOne("Project.Server.Entities.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project.Server.Entities.Diary_Car", b =>
                {
                    b.HasOne("Project.Server.Entities.User", "User")
                        .WithMany("Diary_Car")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project.Server.Entities.Maintenance_Record", b =>
                {
                    b.HasOne("Project.Server.Entities.Diary_Car", "Car")
                        .WithMany("Maintenance_Record")
                        .HasForeignKey("User_Car_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Project.Server.Entities.Cars_Sale", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Project.Server.Entities.Diary_Car", b =>
                {
                    b.Navigation("Maintenance_Record");
                });

            modelBuilder.Entity("Project.Server.Entities.User", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Diary_Car");
                });
#pragma warning restore 612, 618
        }
    }
}
